n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]
tetromino = [                           # 회전 대칭에 따라서 19가지 모양 전부에 대해 지정 (i, j)로 표현한다.
    [(0,0), (0,1), (1,0), (1,1)], # ㅁ
    [(0,0), (0,1), (0,2), (0,3)], # ㅡ
    [(0,0), (1,0), (2,0), (3,0)], # ㅣ
    [(0,0), (0,1), (0,2), (1,0)], 
    [(1,0), (1,1), (1,2), (0,2)],
    [(0,0), (1,0), (1,1), (1,2)], # ㄴ
    [(0,0), (0,1), (0,2), (1,2)], # ㄱ
    [(0,0), (1,0), (2,0), (2,1)],
    [(2,0), (2,1), (1,1), (0,1)],
    [(0,0), (0,1), (1,0), (2,0)], 
    [(0,0), (0,1), (1,1), (2,1)],
    [(0,0), (0,1), (0,2), (1,1)], # ㅜ
    [(1,0), (1,1), (1,2), (0,1)], # ㅗ
    [(0,0), (1,0), (2,0), (1,1)], # ㅏ
    [(1,0), (0,1), (1,1), (2,1)], # ㅓ
    [(1,0), (2,0), (0,1), (1,1)],
    [(0,0), (1,0), (1,1), (2,1)],
    [(1,0), (0,1), (1,1), (0,2)],
    [(0,0), (0,1), (1,1), (1,2)]
]

def find(x, y):
    global ans
    for i in range(19):
        tmp = 0
        for j in range(4):
            try:
                nx = x + tetromino[i][j][0] # 현재 위치에서 테트로미노를 놓은 x 좌표
                ny = y + tetromino[i][j][1] # y 좌표
                tmp += board[nx][ny]
            except:                         # 테트로미노가 board 밖으로 나가면 인덱스 에러가 발생한다.
                continue
        ans = max(ans, tmp) # 최댓값을 저장한다.
        
ans = 0

for i in range(n):      # 테트로미노 19가지 모양에 대해서 전부 계산한다.
    for j in range(m):
        find(i, j)
print(ans)